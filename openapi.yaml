openapi: "3.0.0"
info:
  description: "This is Passport API for my practicing"
  version: "1.0.0"
  title: "PassportApi"
  termsOfService: "http://localhost:8080/api/docs"
  contact:
    email: "evgeniy.kolesnikov@sperasoft.com"

tags:
  - name: "Person"
    description: "Everything about Persons"
  - name: "PassportStore"
    description: "Everything about Passport"
  - name: "Search"
    description: "Will be used to find person by passport number"
  - name: "LostPassport"
    description: "Will be used to deactivate passport and then to make new one"

paths:
  /person:
    post:
      tags:
        - "Person"
      summary: "Add a new person to the store"
      description: "adding a person"
      operationId: "addPerson"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PersonRequest'
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*':
              schema:
                items:
                  $ref: "#/components/schemas/PersonResponse"
        "400":
          description: "Invalid input"

  /person/{id}:
    get:
      tags:
        - "Person"
      summary: "Find person by ID"
      description: "Returns a single person"
      operationId: "getPersonById"
      parameters:
        - name: "id"
          in: "path"
          description: "Person ID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*':
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/PersonResponse"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Person not found"
    put:
      tags:
        - "Person"
      summary: "Updates a person in the store with form data"
      description: "Updates person details with current name "
      operationId: "updatePerson"
      parameters:
        - name: "id"
          in: path
          description: "Person ID to update"
          required: true
          schema:
            type: string
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PersonRequest'
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*':
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/PersonResponse"
        "400":
          description: "Invalid input"
    delete:
      tags:
        - "Person"
      summary: "Delete a person"
      description: "Delete a person with same ID"
      operationId: "deletePerson"
      parameters:
        - name: "id"
          in: "path"
          description: "Person`s ID to delete"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*':
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/PersonResponse"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Person not found"

  /person/{idPerson}/passport:
    get:
      tags:
        - "Person"
      summary: "Find person by passport ID"
      description: "Get current active passports of a person "
      operationId: "getPasswordByPersonIdAndPassportId"
      parameters:
        - name: "idPerson"
          in: "path"
          description: "Person`s ID to get"
          required: true
          schema:
            type: "string"
        - name: "active"
          in: "query"
          description: "Status of passport to get"
          required: true
          schema:
            type: "boolean"
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PassportResponse"
        "400":
          description: "Invalid passport number supplied"
        "404":
          description: "Passport not found"


  /passport:
    get:
      tags:
        - "PassportStore"
      summary: "Find passport with necessary date range"
      description: "Return a list with passports with date range"
      operationId: "getPassports"
      parameters:
        - name: "dateStart"
          in: "query"
          description: "Start date of range"
          required: true
          schema:
            type: "string"
            format: "date"

        - name: "dateEnd"
          in: "query"
          description: "End date of range"
          required: true
          schema:
            type: "string"
            format: "date"
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PassportResponse"
        "400":
          description: "Invalid Order"

    post:
      tags:
        - "PassportStore"
      summary: "Add a passport"
      description: "Add a  passport"
      operationId: "addPassport"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PassportRequest'
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PassportResponse"
        "400":
          description: "Invalid input"

  /passport/{id}:
    get:
      tags:
        - "PassportStore"
      summary: "Finds passport by ID"
      description: "Gives a passport with ID"
      operationId: "getPassport"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of passport to get"
          required: true
          schema:
            type: "string"
        - name: "active"
          in: "query"
          description: "Status of passport to get"
          required: true
          schema:
            type: "boolean"
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PassportResponse"
        "400":
          description: "Invalid Order"
    put:
      tags:
        - "PassportStore"
      summary: "Update passport"
      description: "Update passport by ID"
      operationId: "updatePassport"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of passport to update"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PassportRequest'
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PassportResponse"
        "400":
          description: "Invalid input"
    delete:
      tags:
        - "PassportStore"
      summary: "Delete passport"
      description: "Delete passport by ID"
      operationId: "deletePassport"
      parameters:
        - name: "id"
          in: "path"
          description: "Passport number to delete"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PassportResponse"
        "400":
          description: "Invalid name supplied"
        "404":
          description: "Passport not found"

  /lostPassport:
    post:
      tags:
        - "LostPassport"
      summary: "change status of current passport and create a new active"
      description: "Find passport Person`s data (deactivate it) and create a new one for this Person"
      operationId: "changeStatusOfPassport"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/PersonRequest"
      responses:
        "200":
          description: "Successful operation: new passport created"
          content:
            '*/*':
              schema:
                items:
                  $ref: "#/components/schemas/PassportResponse"
        "404":
          description: "Person not found"

  /searches:
    post:
      tags:
        - "Search"
      summary: "Search a person by passport number "
      description: "Return person"
      operationId: "getPersonPassportByName"
      requestBody:
        content:
          'application/json':
            schema:
              type: "string"
              format: "Example: 2808153675"
              description: "Write Person`s passport number"
            example:
              number: "2808153675"
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PersonResponse"
        "400":
          description: "Invalid passport number supplied"
        "404":
          description: "Person not found"

components:
  schemas:
    PersonRequest:
      type: "object"
      properties:
        name:
          type: "string"
          format: "Example: FirstName SecondName"
        birthday:
          type: "string"
          format: "date"
        birthdayCountry:
          type: "string"
          format: "ISO CODES(2 characters)"
      xml:
        name: "PersonRequest"

    PersonResponse:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
          format: "Example: FirstName SecondName"
        birthday:
          type: "string"
          format: "date"
        birthdayCountry:
          type: "string"
          format: "ISO CODES(2 characters)"
      xml:
        name: "PersonResponse"

    PassportResponse:
      type: "object"
      properties:
        id:
          type: "string"
        number:
          type: "string"
          format: "Example: 2808153675"
        givenDate:
          type: "string"
          format: "date"
        deparmentCode:
          type: "string"
          format: "Example: 280540"
      xml:
        name: "PassportResponse"

    PassportRequest:
      type: "object"
      properties:
        number:
          type: "string"
          format: "Example: 2808153675"
        givenDate:
          type: "string"
          format: "date"
        deparmentCode:
          type: "string"
          format: "Example: 280540"
      xml:
        name: "PassportRequest"

externalDocs:
  description: "Find out data of response"
  url: "http://swagger.io"