openapi: "3.0.0"
info:
  description: "This a Passport API for my practicing"
  version: "1.0.0"
  title: "PassportStore"
  termsOfService: "http://localhost:8080/api/docs"
  contact:
    email: "evgeniy.kolesnikov@sperasoft.com"

tags:
- name: "Person"
  description: "Everything about Persons"
  # externalDocs:
  #   description: "Requests with persons"
    # url: "http://swagger.io"
- name: "PassportStore"
  description: "Everything about Passport"
  # externalDocs:
  #   description: "Requests of passport store"
    # url: "http://swagger.io"

paths:
  /person:
    post:
      tags:
      - "person"
      summary: "Add a new person to the store"
      description: "adding a person to DB"
      operationId: "addPerson"
      requestBody:
        content: 
          'application/json':
            schema:
              $ref: '#/components/schemas/Person'
          'application/xml':
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        "200":
            description: "Successful operation"
            content:
              '*/*' :
                schema:
                  type: object
                  items:
                    $ref: "#/components/schemas/Person"
        "405":
          description: "Invalid input"
  # Maybe it will be needed
    # get:
    #   tags:
    #   - "person"
    #   summary: "Find lists of persons"
    #   description: "Return persons list"
    #   operationId: "getPersons"
    #   responses:
    #     "200":
    #       description: "Successful operation"
    #       content:
    #         '*/*' :
    #           schema:
    #             type: array
    #             items:
    #               $ref: "#/components/schemas/Person"

    #     "404":
    #       description: "Person not found"
 
  /person/{name}:
    get:
      tags:
      - "person"
      summary: "Find person by ID"
      description: "Returns a single person"
      operationId: "getPersonById"
      parameters:
      - name: "name"
        in: "path"
        description: "name of person"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*' :
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Person"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Person not found"
    put:
      tags:
      - "person"
      summary: "Updates a person in the store with form data"
      description: "Updates person details with current name "
      operationId: "updatePerson"
      parameters:
      - name: "name"
        in: path
        description: "Person name to update"
        required: true
        schema:
          type: string
      requestBody:
        content: 
          'application/json':
            schema:
              $ref: '#/components/schemas/Person'
          'application/xml':
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*' :
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Person"
        "405":
          description: "Invalid input"
    delete:
      tags:
      - "person"
      summary: "Deletes a person"
      description: ""
      operationId: "deletePerson"
      parameters:
      - name: "name"
        in: "path"
        description: "Person name to delete"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*' :
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Person"
        "400":
            description: "Invalid name supplied"
        "404":
            description: "Person not found"
  
  /person/passport/{passportNumber}:        
    get:
      tags:
      - "person"
      summary: "Find person by passport number"
      description: "Returns list persons"
      operationId: "getPersonByPasswordNumber"
      parameters:
      - name: "passportNumber"
        in: "path"
        description: "number of person`s password data"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*' :
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Person"
        "400":
          description: "Invalid passport number supplied"
        "404":
          description: "Person not found"    
  
  /person/passportLost/{name}:        
    get:
      tags:
      - "person"
      summary: "Find passport by name"
      description: "Return person"
      operationId: "getPersonPassportByCreds"
      parameters:
      - name: "name"
        in: "path"
        description: "number of person`s password data"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*' :
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Person"
        "400":
          description: "Invalid passport number supplied"
        "404":
          description: "Person not found"               
        
        
  /passport:
    get:
      tags:
      - "passportStore"
      summary: "Finds passport with neccessary date range"
      description: "Gives a list with passports with date range"
      operationId: "getPassports"
      parameters:
      - name: "dateStart"
        in: "query"
        description: "Start date of range"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "dateEnd"
        in: "query"
        description: "End date of range"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*' :
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Person"
        "400":
          description: "Invalid Order"
    
    post:
      tags:
      - "passportStore"
      summary: "Add a passport"
      description: "Add a  passport"
      operationId: "addPassport"
      requestBody:
        content: 
          'application/json':
            schema:
              $ref: '#/components/schemas/Passport'
          'application/xml':
            schema:
              $ref: '#/components/schemas/Passport'
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*' :
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Passport"
        "405":
          description: "Invalid input"
      
  /passport/{number}:
    get:
      tags:
      - "passportStore"
      summary: "Finds passport by number"
      description: "Gives a passport with number"
      operationId: "getPassport"
      parameters:
      - name: "number"
        in: "path"
        description: "number of passport to get"
        required: true
        schema:
          type: "integer"
          format: "int64"
      - name: "active"
        in: "query"
        description: "active status of passport to get"
        required: true
        schema:
          type: "boolean"
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*' :
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Passport"
        "400":
          description: "Invalid Order"
    put:
      tags:
      - "passportStore"
      summary: "Updates a passport"
      description: "Updates passport"
      operationId: "updatePassport"
      parameters:
      - name: "number"
        in: "path"
        description: "number of passport to get"
        required: true
        schema:
          type: "integer"
          format: "int64"
      requestBody:
        content: 
          'application/json':
            schema:
              $ref: '#/components/schemas/Passport'
          'application/xml':
            schema:
              $ref: '#/components/schemas/Passport'
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*' :
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Passport"
        "405":
          description: "Invalid input"
    delete:
      tags:
      - "passportStore"
      summary: "Delete a passport"
      description: ""
      operationId: "deletePassport"
      parameters:
      - name: "number"
        in: "path"
        description: "Passport number to delete"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Successful operation"
          content:
            '*/*' :
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Passport"
        "400":
          description: "Invalid name supplied"
        "404":
          description: "Passport not found"

components:
  schemas:
    Person:
      type: "object"
      properties:
        name:
          type: "string"
        birthday:
          type: "string"
        birthdayCountry:
          type: "string"
      xml:
        name: "Person"
    Passport:
      type: "object"
      properties:
        number:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        birthday:
          type: "string"
        birthdayCountry:
          type: "string"
      xml:
        name: "Person"
   
externalDocs:
  description: "Find out data of response"
  url: "http://swagger.io"